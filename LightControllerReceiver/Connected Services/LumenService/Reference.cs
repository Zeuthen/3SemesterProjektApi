//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightControllerReceiver.LumenService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lumen", Namespace="http://schemas.datacontract.org/2004/07/LightControllerRestService")]
    [System.SerializableAttribute()]
    public partial class Lumen : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="setTimer", Namespace="http://schemas.datacontract.org/2004/07/LightControllerRestService")]
    [System.SerializableAttribute()]
    public partial class setTimer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimerEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimerStartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimerEnd {
            get {
                return this.TimerEndField;
            }
            set {
                if ((this.TimerEndField.Equals(value) != true)) {
                    this.TimerEndField = value;
                    this.RaisePropertyChanged("TimerEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimerStart {
            get {
                return this.TimerStartField;
            }
            set {
                if ((this.TimerStartField.Equals(value) != true)) {
                    this.TimerStartField = value;
                    this.RaisePropertyChanged("TimerStart");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather", Namespace="http://schemas.datacontract.org/2004/07/LightControllerRestService")]
    [System.SerializableAttribute()]
    public partial class Weather : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VejretField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime From {
            get {
                return this.FromField;
            }
            set {
                if ((this.FromField.Equals(value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime To {
            get {
                return this.ToField;
            }
            set {
                if ((this.ToField.Equals(value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Vejret {
            get {
                return this.VejretField;
            }
            set {
                if ((object.ReferenceEquals(this.VejretField, value) != true)) {
                    this.VejretField = value;
                    this.RaisePropertyChanged("Vejret");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Temperature", Namespace="http://schemas.datacontract.org/2004/07/LightControllerRestService")]
    [System.SerializableAttribute()]
    public partial class Temperature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperaturField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime From {
            get {
                return this.FromField;
            }
            set {
                if ((this.FromField.Equals(value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temperatur {
            get {
                return this.TemperaturField;
            }
            set {
                if ((this.TemperaturField.Equals(value) != true)) {
                    this.TemperaturField = value;
                    this.RaisePropertyChanged("Temperatur");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime To {
            get {
                return this.ToField;
            }
            set {
                if ((this.ToField.Equals(value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LumenService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLumen", ReplyAction="http://tempuri.org/IService1/AddLumenResponse")]
        LightControllerReceiver.LumenService.Lumen AddLumen(LightControllerReceiver.LumenService.Lumen lumen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLumen", ReplyAction="http://tempuri.org/IService1/AddLumenResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen> AddLumenAsync(LightControllerReceiver.LumenService.Lumen lumen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLumen", ReplyAction="http://tempuri.org/IService1/GetLumenResponse")]
        LightControllerReceiver.LumenService.Lumen[] GetLumen();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLumen", ReplyAction="http://tempuri.org/IService1/GetLumenResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> GetLumenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLumenByID", ReplyAction="http://tempuri.org/IService1/GetLumenByIDResponse")]
        LightControllerReceiver.LumenService.Lumen[] GetLumenByID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLumenByID", ReplyAction="http://tempuri.org/IService1/GetLumenByIDResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> GetLumenByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLumenByDate", ReplyAction="http://tempuri.org/IService1/GetLumenByDateResponse")]
        LightControllerReceiver.LumenService.Lumen[] GetLumenByDate(string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLumenByDate", ReplyAction="http://tempuri.org/IService1/GetLumenByDateResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> GetLumenByDateAsync(string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateLumen", ReplyAction="http://tempuri.org/IService1/UpdateLumenResponse")]
        LightControllerReceiver.LumenService.Lumen UpdateLumen(LightControllerReceiver.LumenService.Lumen lumen, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateLumen", ReplyAction="http://tempuri.org/IService1/UpdateLumenResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen> UpdateLumenAsync(LightControllerReceiver.LumenService.Lumen lumen, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLumen", ReplyAction="http://tempuri.org/IService1/DeleteLumenResponse")]
        LightControllerReceiver.LumenService.Lumen[] DeleteLumen();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLumen", ReplyAction="http://tempuri.org/IService1/DeleteLumenResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> DeleteLumenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLumenByID", ReplyAction="http://tempuri.org/IService1/DeleteLumenByIDResponse")]
        LightControllerReceiver.LumenService.Lumen[] DeleteLumenByID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLumenByID", ReplyAction="http://tempuri.org/IService1/DeleteLumenByIDResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> DeleteLumenByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddStatus", ReplyAction="http://tempuri.org/IService1/AddStatusResponse")]
        string AddStatus(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddStatus", ReplyAction="http://tempuri.org/IService1/AddStatusResponse")]
        System.Threading.Tasks.Task<string> AddStatusAsync(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLimit", ReplyAction="http://tempuri.org/IService1/AddLimitResponse")]
        string AddLimit(string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLimit", ReplyAction="http://tempuri.org/IService1/AddLimitResponse")]
        System.Threading.Tasks.Task<string> AddLimitAsync(string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTimer", ReplyAction="http://tempuri.org/IService1/AddTimerResponse")]
        string AddTimer(LightControllerReceiver.LumenService.setTimer timer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTimer", ReplyAction="http://tempuri.org/IService1/AddTimerResponse")]
        System.Threading.Tasks.Task<string> AddTimerAsync(LightControllerReceiver.LumenService.setTimer timer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetWeather", ReplyAction="http://tempuri.org/IService1/GetWeatherResponse")]
        LightControllerReceiver.LumenService.Weather[] GetWeather();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetWeather", ReplyAction="http://tempuri.org/IService1/GetWeatherResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Weather[]> GetWeatherAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTemperature", ReplyAction="http://tempuri.org/IService1/GetTemperatureResponse")]
        LightControllerReceiver.LumenService.Temperature[] GetTemperature();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTemperature", ReplyAction="http://tempuri.org/IService1/GetTemperatureResponse")]
        System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Temperature[]> GetTemperatureAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LightControllerReceiver.LumenService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LightControllerReceiver.LumenService.IService1>, LightControllerReceiver.LumenService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LightControllerReceiver.LumenService.Lumen AddLumen(LightControllerReceiver.LumenService.Lumen lumen) {
            return base.Channel.AddLumen(lumen);
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen> AddLumenAsync(LightControllerReceiver.LumenService.Lumen lumen) {
            return base.Channel.AddLumenAsync(lumen);
        }
        
        public LightControllerReceiver.LumenService.Lumen[] GetLumen() {
            return base.Channel.GetLumen();
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> GetLumenAsync() {
            return base.Channel.GetLumenAsync();
        }
        
        public LightControllerReceiver.LumenService.Lumen[] GetLumenByID(string id) {
            return base.Channel.GetLumenByID(id);
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> GetLumenByIDAsync(string id) {
            return base.Channel.GetLumenByIDAsync(id);
        }
        
        public LightControllerReceiver.LumenService.Lumen[] GetLumenByDate(string dateFrom, string dateTo) {
            return base.Channel.GetLumenByDate(dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> GetLumenByDateAsync(string dateFrom, string dateTo) {
            return base.Channel.GetLumenByDateAsync(dateFrom, dateTo);
        }
        
        public LightControllerReceiver.LumenService.Lumen UpdateLumen(LightControllerReceiver.LumenService.Lumen lumen, string id) {
            return base.Channel.UpdateLumen(lumen, id);
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen> UpdateLumenAsync(LightControllerReceiver.LumenService.Lumen lumen, string id) {
            return base.Channel.UpdateLumenAsync(lumen, id);
        }
        
        public LightControllerReceiver.LumenService.Lumen[] DeleteLumen() {
            return base.Channel.DeleteLumen();
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> DeleteLumenAsync() {
            return base.Channel.DeleteLumenAsync();
        }
        
        public LightControllerReceiver.LumenService.Lumen[] DeleteLumenByID(string id) {
            return base.Channel.DeleteLumenByID(id);
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Lumen[]> DeleteLumenByIDAsync(string id) {
            return base.Channel.DeleteLumenByIDAsync(id);
        }
        
        public string AddStatus(string status) {
            return base.Channel.AddStatus(status);
        }
        
        public System.Threading.Tasks.Task<string> AddStatusAsync(string status) {
            return base.Channel.AddStatusAsync(status);
        }
        
        public string AddLimit(string limit) {
            return base.Channel.AddLimit(limit);
        }
        
        public System.Threading.Tasks.Task<string> AddLimitAsync(string limit) {
            return base.Channel.AddLimitAsync(limit);
        }
        
        public string AddTimer(LightControllerReceiver.LumenService.setTimer timer) {
            return base.Channel.AddTimer(timer);
        }
        
        public System.Threading.Tasks.Task<string> AddTimerAsync(LightControllerReceiver.LumenService.setTimer timer) {
            return base.Channel.AddTimerAsync(timer);
        }
        
        public LightControllerReceiver.LumenService.Weather[] GetWeather() {
            return base.Channel.GetWeather();
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Weather[]> GetWeatherAsync() {
            return base.Channel.GetWeatherAsync();
        }
        
        public LightControllerReceiver.LumenService.Temperature[] GetTemperature() {
            return base.Channel.GetTemperature();
        }
        
        public System.Threading.Tasks.Task<LightControllerReceiver.LumenService.Temperature[]> GetTemperatureAsync() {
            return base.Channel.GetTemperatureAsync();
        }
    }
}
